parameters:
- name: bcVersion
  type: string
- name: alLanguageExtensionFileName
  type: string
  default: ''

- name: organizationName
  type: string
  default: ''
- name: appFolders
  type: object
  default:
  - MainApp
- name: testFolders
  type: object
  default: []
- name: masterBranch
  type: string
  default: WIP
- name: mainAppFolder
  type: string
  default: MainApp
- name: appReleaseVersionFormat
  type: string
  default: '{Manifest.Build}.{Manifest.Revision}'
- name: appVersionFormat
  type: string
  default: '{Container.Major}.{Manifest.Minor}.{Release.Major}.{Release.Minor}'
- name: customAppVersion
  type: string
  default: '0.0.0.0'
- name: manifestVersionMismatchAction
  type: string
  default: error
  values:
  - error
  - warning
  - none

- name: dockerMemory
  type: string
  default: 4g
- name: dockerIsolation
  type: string
  default: hyperv
  values:
  - hyperv
  - process

- name: publishOutput
  type: boolean
  default: true
- name: latestFolder
  type: string
  default: Latest
- name: beforeAppsInstallScript
  type: string
  default: ''
- name: latestDependencyAppPaths
  type: object
  default: []

stages:
- stage: Main
  displayName: Main
  jobs:
  - job: Main
    condition: or(startsWith(variables['Build.SourceBranchName'], variables['MasterBranch']), startsWith(variables['Build.SourceBranchName'], variables['merge']), startsWith(variables['Build.SourceVersionMessage'], 'Merge WIP to Release-'))
    variables:
    - name: OrganizationName
      value: ${{ parameters.organizationName }}

    - name: DockerMemory
      value: ${{ parameters.dockerMemory }}

    - name: IsPullRequest
      value: $[ ne(variables['System.PullRequest.PullRequestId'], '') ]
    - name: MasterBranch
      value: ${{ parameters.masterBranch }}
    - name: BcApplicationVersion
      value: ''
    steps:
    - powershell: |
        $ExitCode = 0
        $FreeDiskSpace = Get-PSDrive -Name C | Select-Object -ExpandProperty Free
        if ($FreeDiskSpace -lt 10gb) {
            Write-Host -Object '##[error]There is no free disk space left. There must be atleast 10 GB.'
            $ExitCode = 1
        }
        Add-Type -AssemblyName Microsoft.VisualBasic
        $ComputerInfo = [Microsoft.VisualBasic.Devices.ComputerInfo]::new()
        if ($ComputerInfo.AvailablePhysicalMemory -lt 4gb) {
            Write-Host -Object '##[error]There is no free memory space left. There must be atleast 4 GB.'
            $ExitCode = 1
        }
        exit($ExitCode)
      condition: always()
      displayName: Checking free disk and ram space
    - checkout: self
      clean: true

    - task: DownloadSecureFile@1
      name: DownloadBCAppSigningCertificate
      inputs:
        secureFile: $(BCAppSigningCertificateSecureFileName)
      displayName: Download certificate for BC app signing

    - powershell: |
        Set-StrictMode -Version Latest
        $ErrorActionPreference = 'Stop'
        $AppFolders = $(
          $env:AppFolders | ConvertFrom-Json
        )
        Write-Host -Object 'App folders:'
        $AppFolders | Out-Host
        $TestFolders = $(
          $env:TestFolders | ConvertFrom-Json
        )
        Write-Host -Object 'Test app folders:'
        $TestFolders | Out-Host
        Write-Host
        Write-Host -Object "BC version given $env:BcVersion"
        $Pattern = '^(?<Type>OnPrem|Sandbox)\/(?<Version>Current|NextMinor|NextMajor|\d+(?:\.\d+){0,3})\/(?<Country>base|w1|[a-zA-Z]{2})$'
        if ($env:BcVersion -notmatch $Pattern) {
          Write-Host -Object 'BC version expected pattern ''<OnPrem|Sandbox>/<Current|NextMinor|NextMajor|Numeric version, eg 16.3>/<base or w1 or country>'' (case sensitive)'
          throw 'BC version doesn''t match pattern. '
        }
        Write-Host
        Write-Host -Object "Parsed artifact type:    $($Matches.Type)"
        Write-Host -Object "Parsed artifact version: $($Matches.Version)"
        Write-Host -Object "Parsed artifact country: $($Matches.Country)"
        $GetBcArtifactUrlParameters = @{
          Type           = $Matches.Type
          Select         = 'Latest'
          Version        = $Matches.Version -replace 'Current|NextMinor|NextMajor', ''
          Country        = $Matches.Country
        }
        switch ($Matches.Version) {
          'Current' {
            $GetBcArtifactUrlParameters.Select = 'Current'
            break
          }
          { $_ -in @('NextMinor', 'NextMajor') } {
            $GetBcArtifactUrlParameters.SasToken = $env:BcInsiderSasToken
            $GetBcArtifactUrlParameters.Select = $Matches.Version            
            break
          }
        }

        Write-Host
        Write-Host -Object ($GetBcArtifactUrlParameters | ConvertTo-Json -Depth 1)

        # Exit early because BC22 builds do not work because the license error.
        if ($GetBcArtifactUrlParameters.Select -eq 'NextMajor') {
          Write-Host -Object 'Exiting early until BC22 builds are fixed.'
          if ([datetime]::Now -ge [datetime]'2023-01-01') {
            throw 'Are BC22 builds finally fixed?'
          }
          exit
        }

        $BcArtifactUrl = Get-BCArtifactUrl @GetBcArtifactUrlParameters
        
        $ApplicationArtifactPath = Download-Artifacts -artifactUrl $BcArtifactUrl
        $BcArtifactManifest = Get-Content -LiteralPath ($ApplicationArtifactPath | Join-Path -ChildPath 'manifest.json') | ConvertFrom-Json
        [version]$Global:PlatformVersion = $BcArtifactManifest.platform
        $NewBCContainer = {
          param([hashtable]$Parameters)
          $Parameters['isolation'] = $env:DockerIsolation
          New-BcContainer @parameters
          Write-Host -Object "Running script inside container: $env:BeforeAppsInstallScript"
          if ($env:BeforeAppsInstallScript) {
            Invoke-ScriptInBcContainer -containerName $Parameters.containerName -argumentList $env:BeforeAppsInstallScript -scriptBlock {
              param(
                $BeforeAppsInstallScript
              )
              Invoke-Expression -Command $BeforeAppsInstallScript
            }
          }
          if (-not [string]::IsNullOrEmpty($env:ALLanguageExtensionFileName)) {
            Invoke-ScriptInBcContainer $Parameters.containerName -scriptblock {
              $ProgressPreference = 'SilentlyContinue'
              Remove-Item -Path 'C:\run\*.vsix'
            }
          }
          if (-not [string]::IsNullOrEmpty($env:ALLanguageExtensionFileName)) {
            Copy-FileToBCContainer -containerName $Parameters.containerName -localPath $env:ALLanguageExtensionFileName -containerPath 'C:\run\ALLanguage.vsix'
          }
          [version]$AppVersion = $(
            Get-Content -Path $env:MainAppFolder/app.json |
            ConvertFrom-Json |
            Select-Object -ExpandProperty application
          )
          foreach ($AppFolder in $AppFolders) {
            Write-Host
            Write-Host -Object "Updating app version in '$AppFolder'..."
            [version]$CustomAppVersion = $env:CustomAppVersion
            [version]$ManifestVersion = $(
              Get-Content -Path $AppFolder/app.json |
              ConvertFrom-Json |
              Select-Object -ExpandProperty version
            )
            Write-Host "##vso[task.setvariable variable=ManifestVersion]$ManifestVersion"
            $VersionNumberPattern = '\{(?<Identifier>[a-zA-Z.]+)\}'
            [System.Text.RegularExpressions.MatchEvaluator]$VersionNumberEvaluator = {
              param(
                [System.Text.RegularExpressions.Match]$Match
              )
              switch -CaseSensitive ($Match.Groups['Identifier'].Value) {
                'Manifest.Major' { $ManifestVersion.Major }
                'Manifest.Minor' { $ManifestVersion.Minor }
                'Manifest.Build' { $ManifestVersion.Build }
                'Manifest.Revision' { $ManifestVersion.Revision }
                'Container.Major' { $PlatformVersion.Major }
                'Container.Minor' { $PlatformVersion.Minor }
                'Container.Build' { $PlatformVersion.Build }
                'Container.Revision' { $PlatformVersion.Revision }
                'Custom.Major' { $CustomAppVersion.Major }
                'Custom.Minor' { $CustomAppVersion.Minor }
                'Custom.Build' { $CustomAppVersion.Build }
                'Custom.Revision' { $CustomAppVersion.Revision }
                'Release.Major' { $SelectedAppReleaseVersion.Major }
                'Release.Minor' { $SelectedAppReleaseVersion.Minor }
                'Release.Build' { $SelectedAppReleaseVersion.Build }
                'Release.Revision' { $SelectedAppReleaseVersion.Revision }
              }
            }
            [version]$SelectedAppReleaseVersion = [regex]::Replace($env:AppReleaseVersionFormat, $VersionNumberPattern, $VersionNumberEvaluator)
            [version]$SelectedAppVersion = [regex]::Replace($env:AppVersionFormat, $VersionNumberPattern, $VersionNumberEvaluator)
            if ($ManifestVersion.Major -ne $SelectedAppVersion.Major -or `
                $ManifestVersion.Minor -notin @(0, $SelectedAppVersion.Minor) -or `
                $ManifestVersion.Build -ne $SelectedAppVersion.Build -and `
                $ManifestVersion.Revision -ne $SelectedAppVersion.Revision) {
              if ($ManifestVersionMismatchAction -in @('warning', 'error')) {
                Write-Warning -Message "Manifest app version does not match selected app version."
              }
              if ($ManifestVersionMismatchAction -eq 'error') {
                exit(1)
              }
            }
            Write-Host -Object "Selected application release version: $SelectedAppReleaseVersion"
            Write-Host -Object "Selected application version: $SelectedAppVersion"
            Write-Host -Object "##vso[task.setvariable variable=AppReleaseVersion;]$SelectedAppReleaseVersion"
            Write-Host -Object "##vso[task.setvariable variable=BcApplicationVersion;]$SelectedAppVersion"
            $ManifestApp = $(
              Get-Content -Path $AppFolder/app.json |
              ConvertFrom-Json )
            $ManifestApp.Version = [string]$SelectedAppVersion
            $ManifestApp |
            ConvertTo-Json |
            Set-Content -LiteralPath $AppFolder/app.json
          }
        }
        $InstallAppsFolders = $(
          $env:LatestDependencyAppPaths | ConvertFrom-Json
        )
        $AppsFromDependencies = @(
          $InstallAppsFolders |
          Where-Object -FilterScript { $_ } |
          ForEach-Object -Process {
            $AppFiles = `
              Get-ChildItem -LiteralPath $_ -Filter '*.app' -Recurse |
            Select-Object -ExpandProperty FullName
            if ($AppFiles) {
              $AppFiles
            } else {
              Write-Host -Object "No app files found in folder $_."
              throw 'No app files found in folder.'
            }
          }
        )
        Write-Host -Object "Installed apps folders: $($InstallAppsFolders -join ', ')"
        $Global:ContainerName = -join [char[]]([char]'a'..[char]'z' | Get-Random -Count 8)
        Write-Host -Object "##vso[task.setvariable variable=ContainerName;]$Global:ContainerName"
        $LicensePath = $(
          ($PlatformVersion.Major)..12 |
          ForEach-Object -Process { "\\filestorage\Projects\DevOps\!Pipeline\Licenses\BC$_.flf" } |
          Resolve-Path |
          Select-Object -First 1 -ExpandProperty ProviderPath
        )
        Write-Host -Object "Selected license path for platform BC$($PlatformVersion.Major): $LicensePath"
        $GetRunAlPipelineParameters = @{
          pipelinename                = 'Build'
          containerName               = $Global:ContainerName
          artifact                    = $BcArtifactUrl
          baseFolder                  = $env:BUILD_SOURCESDIRECTORY
          licenseFile                 = $LicensePath
          appFolders                  = $AppFolders
          testFolders                 = $TestFolders
          memoryLimit                 = $env:DockerMemory
          codeSignCertPfxFile         = $env:CodeSignCertPfxFile
          codeSignCertPfxPassword     = (ConvertTo-SecureString -String $env:CodeSignCertPfxPassword -AsPlainText -Force)
          installApps                 = $AppsFromDependencies
          installTestRunner           = $true
          installTestFramework        = $true
          installTestLibraries        = $true
          azureDevOps                 = $true
          NewBCContainer              = $NewBCContainer
        }
        Run-AlPipeline @GetRunAlPipelineParameters
      env:
        BcVersion: ${{ parameters.bcVersion }}
        BcInsiderSasToken: $(BCSasToken)
        ALLanguageExtensionFileName: ${{ parameters.alLanguageExtensionFileName }}
        CodeSignCertPfxFile: $(DownloadBCAppSigningCertificate.SecureFilePath)
        CodeSignCertPfxPassword: $(BCAppSigningCertificatePassword)
        MainAppFolder: ${{ parameters.mainAppFolder }}
        AppFolders: ${{ convertToJson(parameters.appFolders) }}
        TestFolders: ${{ convertToJson(parameters.testFolders) }}
        AppReleaseVersionFormat: ${{ parameters.appReleaseVersionFormat }}
        AppVersionFormat: ${{ parameters.appVersionFormat }}
        CustomAppVersion: ${{ parameters.customAppVersion }}
        DockerMemory: $(DockerMemory)
        DockerIsolation: ${{ parameters.dockerIsolation }}
        BeforeAppsInstallScript: ${{ parameters.beforeAppsInstallScript }}
        LatestDependencyAppPaths: ${{ convertToJson(parameters.latestDependencyAppPaths) }}
      displayName: Run Pipeline
    - ${{ if parameters.publishOutput }}:
      - powershell: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'



          [version]$ManifestVersionIs = "$(ManifestVersion)" 
          $ManifestVersion = '{0}.{1}' -f $ManifestVersionIs.Build,$ManifestVersionIs.Revision
          Write-Host $ManifestVersion
          
          $BranchName = $(
            if ($env:IsPullRequest -eq 'false') {
                $env:Build_SourceBranchName
            } else {
                $env:System_PullRequest_TargetBranch -replace 'refs/heads/', ''
            }
          )
              
          if($env:Build_SourceBranchName.Contains('Release') -Or $env:Build_SourceBranch -match 'release')
          {
            $CommonPath = "C:\AzureDevOps\!Releases\$env:OrganizationName\$env:System_TeamProject\$env:Build_Repository_Name\$env:AppReleaseVersion\$BranchName-$env:BcApplicationVersion"
            $FileStoragePath = "\\filestorage\Projects\DevOps\$env:OrganizationName\$env:System_TeamProject\$env:Build_Repository_Name\$env:AppReleaseVersion\$BranchName-$env:BcApplicationVersion"
          }
          else
          {
            $CommonPath = "C:\AzureDevOps\!Prereleases\$env:OrganizationName\$env:System_TeamProject\$env:Build_Repository_Name\$env:AppReleaseVersion\$BranchName-$env:BcApplicationVersion"
            $FileStoragePath = "\\filestorage\Projects\DevOps\$env:OrganizationName\$env:System_TeamProject\$env:Build_Repository_Name\$env:AppReleaseVersion\$BranchName-$env:BcApplicationVersion"
          }
          
          $TempPath = "$CommonPath-Temporary-$env:Build_BuildID"
          if ([System.IO.Directory]::Exists($TempPath)) {
              throw "TempPath ($TempPath) already exist"
          }
          [System.IO.Directory]::CreateDirectory($TempPath)
          Copy-Item -Path * -Exclude .git -Destination $TempPath -Recurse -Force -ErrorAction SilentlyContinue
          $OldPath = "$CommonPath-Old"
          if ([System.IO.Directory]::Exists($OldPath)) {
              [System.IO.Directory]::Delete($OldPath, $true)
          }
          $Path = $CommonPath
          if ([System.IO.Directory]::Exists($Path)) {
              [System.IO.Directory]::CreateDirectory($Path)
              Copy-Item -Path $Path\* -Destination $OldPath -Recurse -Force -ErrorAction SilentlyContinue
              [System.IO.Directory]::Delete($Path, $true)
          }
          if (-not ([System.IO.Directory]::Exists($Path))) {
              Copy-Item -Path $TempPath -Destination $Path -Recurse -Force -ErrorAction SilentlyContinue
              [System.IO.Directory]::Delete($TempPath, $true)
          }
          
        
          $TempPaths = "$FileStoragePath-Temporary-$env:Build_BuildID"
          if ([System.IO.Directory]::Exists($TempPaths)) {
               [System.IO.Directory]::Delete($TempPaths, $true)
          }
          [System.IO.Directory]::CreateDirectory($TempPaths)
          Copy-Item -Path * -Exclude .git -Destination $TempPaths -Recurse -Force -ErrorAction SilentlyContinue
          $OldPaths = "$CommonPath-Old"
          if ([System.IO.Directory]::Exists($OldPaths)) {
              [System.IO.Directory]::Delete($OldPaths, $true)
          }        
          $Paths = $FileStoragePath
          if ([System.IO.Directory]::Exists($Paths)) {
              [System.IO.Directory]::CreateDirectory($Paths)
              Copy-Item -Path $Paths\* -Destination $OldPath -Recurse -Force -ErrorAction SilentlyContinue
              [System.IO.Directory]::Delete($Paths, $true)
          }
          if (-not ([System.IO.Directory]::Exists($Paths))) {
              Copy-Item -Path $TempPaths -Destination $Paths -Recurse -Force -ErrorAction SilentlyContinue
              [System.IO.Directory]::Delete($TempPaths, $true)
          }
        
          
          
        displayName: Copy files to BCApps
    - ${{ if ne(parameters.latestFolder, '') }}:
      - powershell: |
          Set-StrictMode -Version Latest

          $NamePath = 'Latest-' + $env:Build_SourceBranchName.ToUpper()
          if($NamePath.Contains('RELEASE')){
          $NamePath = $NamePath -replace 'RELEASE-',''
          }
           
          $NameFile =  Get-Item -Path '.output/*' -Exclude .git -ErrorAction SilentlyContinue
          $outputFile = Split-Path $NameFile -leaf
          
          
          $Outputfilepath = @()
          if($env:Build_SourceBranchName.Contains('Release') -Or $env:Build_SourceBranch -match 'release')
          {
          $Path = "C:\AzureDevOps\!Releases\$env:OrganizationName\$env:System_TeamProject\$env:Build_Repository_Name\$env:LatestFolder"
          $FileStoragePath = "\\filestorage\Projects\DevOps\!Releases\$NamePath"
          foreach ($i in $outputFile)
          {
          $i = $i -replace ".{12}$"
          Write-Host 'i yra $i'
          Write-Host $i
          $Outputfilepath += "\\filestorage\Projects\DevOps\!Releases\$NamePath\$i"
          Write-Host 'OutputFilePath yra $Outputfilepath'
          Write-Host $Outputfilepath
          }
          }
          
          else{
          $Path = "C:\AzureDevOps\!Prereleases\$env:OrganizationName\$env:System_TeamProject\$env:Build_Repository_Name\$env:LatestFolder"
          $FileStoragePath = "\\filestorage\Projects\DevOps\!Prereleases\$NamePath"
          foreach ($i in $outputFile)
          {
          $i = $i -replace ".{12}$"
          Write-Host 'i yra $i'
          Write-Host $i
          $Outputfilepath += "\\filestorage\Projects\DevOps\!Prereleases\$NamePath\$i"
          Write-Host 'OutputFilePath yra $Outputfilepath'
          Write-Host $Outputfilepath
          }
          }
          
          if (-not ([System.IO.Directory]::Exists($FileStoragePath))) {
              [System.IO.Directory]::CreateDirectory($FileStoragePath)
          }
                       
          foreach ($o2 in $Outputfilepath){
          if (Test-Path -Path "$o2*") {
          Write-Host 'O2 yra $O2'
          Write-Host $o2
          Write-Host "File Exists" -ForegroundColor red -BackgroundColor white
          (Get-ChildItem -Path "$o2*").Delete()
          } 
          }

          if ([System.IO.Directory]::Exists($Path)) {
              [System.IO.Directory]::Delete($Path, $true)
          }
          if (-not ([System.IO.Directory]::Exists($Path))) {
              [System.IO.Directory]::CreateDirectory($Path)
              Copy-Item -Path * -Exclude .git -Destination $Path -Recurse -Force -ErrorAction SilentlyContinue
          }
              
          if ([System.IO.Directory]::Exists($FileStoragePath)) {
              Copy-Item -Path '.output/*' -Exclude .git -Destination $FileStoragePath -Recurse -Force -ErrorAction SilentlyContinue
          }

         
        env:
          LatestFolder: ${{ parameters.latestFolder }}
        displayName: Copy files to Latest folder
    - powershell: |
        Remove-BcContainer -containerName $env:ContainerName
        Flush-ContainerHelperCache -KeepDays 1
      condition: always()
      env:
        ContainerName: $(ContainerName)
      displayName: 'Cleanup'
