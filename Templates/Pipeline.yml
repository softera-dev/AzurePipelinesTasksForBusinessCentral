parameters:
- name: bcVersion
  type: string
  default: ''
- name: alLanguageExtensionFileName
  type: string
  default: ''
- name: alDotNetAssemblyProbingPaths
  type: string
  default: C:/Windows/Assembly,./.netPackages

- name: organizationName
  type: string
  default: ''
- name: appFolders
  type: object
  default:
  - MainApp
- name: testFolders
  type: object
  default: []
- name: masterBranch
  type: string
  default: WIP
- name: appReleaseVersionFormat
  type: string
  default: '{Manifest.Build}.{Manifest.Revision}'
- name: appVersionFormat
  type: string
  default: '{Container.Major}.{Container.Minor}.{Release.Major}.{Release.Minor}'
- name: customAppVersion
  type: string
  default: '0.0.0.0'
- name: manifestVersionMismatchAction
  type: string
  default: error
  values:
  - error
  - warning
  - none

- name: dockerMemory
  type: string
  default: 4g
- name: dockerIsolation
  type: string
  default: hyperv
  values:
  - hyperv
  - process

- name: latestFolder
  type: string
  default: Latest
- name: beforeAppsInstallScript
  type: string
  default: ''
- name: latestDependencyAppPaths
  type: object
  default: []

stages:
- stage: Main
  displayName: Main
  jobs:
  - job: Main
    condition: or(startsWith(variables['Build.SourceBranchName'], variables['MasterBranch']), startsWith(variables['Build.SourceBranchName'], variables['merge']), startsWith(variables['Build.SourceVersionMessage'], 'Merge WIP to Release-'))
    variables:
    - name: OrganizationName
      value: ${{ parameters.organizationName }}

    - name: DockerMemory
      value: ${{ parameters.dockerMemory }}

    - name: IsPullRequest
      value: $[ ne(variables['System.PullRequest.PullRequestId'], '') ]
    - name: MasterBranch
      value: ${{ parameters.masterBranch }}
    - name: BcApplicationVersion
      value: ''
    steps:
    - powershell: |
        $ExitCode = 0
        $FreeDiskSpace = Get-PSDrive -Name C | Select-Object -ExpandProperty Free
        if ($FreeDiskSpace -lt 10gb) {
            Write-Host -Object '##[error]There is no free disk space left. There must be atleast 10 GB.'
            $ExitCode = 1
        }
        Add-Type -AssemblyName Microsoft.VisualBasic
        $ComputerInfo = [Microsoft.VisualBasic.Devices.ComputerInfo]::new()
        if ($ComputerInfo.AvailablePhysicalMemory -lt 4gb) {
            Write-Host -Object '##[error]There is no free memory space left. There must be atleast 4 GB.'
            $ExitCode = 1
        }
        exit($ExitCode)
      condition: always()
      displayName: Checking free disk and ram space

    - checkout: self
      clean: true

    - task: DownloadSecureFile@1
      name: DownloadBCLicense
      inputs:
        secureFile: $(BCLicense.SecureFileName)
      displayName: Download BC license

    - task: DownloadSecureFile@1
      name: DownloadBCAppSigningCertificate
      inputs:
        secureFile: $(BCAppSigningCertificateSecureFileName)
      displayName: Download certificate for BC app signing

    - powershell: |
        Set-StrictMode -Version Latest
        $ErrorActionPreference = 'Stop'

        $AppFolders = $(
          $env:AppFolders | ConvertFrom-Json
        )
        Write-Host -Object 'App folders:'
        $AppFolders | Out-Host
        
        $TestFolders = $(
          $env:TestFolders | ConvertFrom-Json
        )
        Write-Host -Object 'Test app folders:'
        $TestFolders | Out-Host
        Write-Host

        if ($env:BcVersion) {
          Write-Host -Object "BC version given $env:BcVersion"
          $Pattern = '^(?<Type>OnPrem|Sandbox)\/(?<Version>Current|NextMinor|NextMajor|\d+(?:\.\d+){0,3})\/(?<Country>base|w1|[a-zA-Z]{2})$'
          if ($env:BcVersion -notmatch $Pattern) {
            Write-Host -Object 'BC version expected pattern ''<OnPrem|Sandbox>/<Current|NextMinor|NextMajor|Numeric version, eg 16.3>/<base or w1 or country>'' (case sensitive)'
            throw 'BC version doesn''t match pattern. '
          }
          Write-Host
          Write-Host -Object "Parsed artifact type:    $($Matches.Type)"
          Write-Host -Object "Parsed artifact version: $($Matches.Version)"
          Write-Host -Object "Parsed artifact country: $($Matches.Country)"
          $GetBcArtifactUrlParameters = @{
            Type           = $Matches.Type
            Version        = $Matches.Version -replace 'Current|NextMinor|NextMajor', ''
            Country        = $Matches.Country
            Select         = 'Latest'
            StorageAccount = 'bcartifacts'
            SasToken       = ''
          }
          switch ($Matches.Version) {
            'Current' {
              $GetBcArtifactUrlParameters.Select = 'Current'
              $GetBcArtifactUrlParameters.StorageAccount = ''
              break
            }
            { $_ -in @('NextMinor', 'NextMajor') } {
              $GetBcArtifactUrlParameters.StorageAccount = ''
              $GetBcArtifactUrlParameters.SasToken = $env:BcInsiderSasToken
              $GetBcArtifactUrlParameters.Select = $Matches.Version
              break
            }
          }
          Write-Host
          Write-Host -Object "Artifact type:            $($GetBcArtifactUrlParameters.Type)"
          Write-Host -Object "Artifact version:         $($GetBcArtifactUrlParameters.Version -creplace '^$', $Matches.Version)"
          Write-Host -Object "Artifact country:         $($GetBcArtifactUrlParameters.Country)"
          Write-Host -Object "Artifact storage account: $($GetBcArtifactUrlParameters.StorageAccount)"
        }
        if ($GetBcArtifactUrlParameters.Version -notmatch '^(?:11\.\d+|13\.\d+|14\.(?:0|1|2|3|4))\.\d+\.\d+$') {
          $BcArtifactUrlOrImageName = @{
            artifact = Get-BCArtifactUrl @GetBcArtifactUrlParameters
          }
        } else {
          $BcArtifactUrlOrImageName = @{
            artifact  = ''
            imageName = "mcr.microsoft.com/businesscentral/$($GetBcArtifactUrlParameters.Type.ToLower()):$($GetBcArtifactUrlParameters.Version)-$($GetBcArtifactUrlParameters.Country)"
          }
        }


        $NewBCContainer = {
          param([hashtable]$Parameters)
          $Parameters['isolation'] = $env:DockerIsolation
          New-BcContainer @parameters

          Write-Host -Object "Running script inside container: $env:BeforeAppsInstallScript"
          if ($env:BeforeAppsInstallScript) {
            Invoke-ScriptInBcContainer -containerName $Parameters.containerName -argumentList $env:BeforeAppsInstallScript -scriptBlock {
              param(
                $BeforeAppsInstallScript
              )
              Invoke-Expression -Command $BeforeAppsInstallScript
            }
          }

          if (-not [string]::IsNullOrEmpty($env:ALLanguageExtensionFileName)) {
            Invoke-ScriptInBcContainer $Parameters.containerName -scriptblock {
              $ProgressPreference = 'SilentlyContinue'
              Remove-Item -Path 'C:\run\*.vsix'
            }
          }
          if (-not [string]::IsNullOrEmpty($env:ALLanguageExtensionFileName)) {
            Copy-FileToBCContainer -containerName $Parameters.containerName -localPath $env:ALLanguageExtensionFileName -containerPath 'C:\run\ALLanguage.vsix'
          }


          foreach ($AppFolder in $AppFolders) {
            Write-Host
            Write-Host -Object "Updating app version in '$AppFolder'..."

            [version]$CustomAppVersion = $env:CustomAppVersion
            [version]$ContainerVersion = $(
              Get-BCContainerDebugInfo -containerName $Parameters.containerName -ExcludeEnvVars -ExcludePing -ExcludeDockerLogs |
              ConvertFrom-Json
            ).'container.labels'.version
            [version]$ManifestVersion = $(
              Get-Content -Path $AppFolder/app.json |
              ConvertFrom-Json |
              Select-Object -ExpandProperty version
            )
            $VersionNumberPattern = '\{(?<Identifier>[a-zA-Z.]+)\}'
            [System.Text.RegularExpressions.MatchEvaluator]$VersionNumberEvaluator = {
              param(
                [System.Text.RegularExpressions.Match]$Match
              )
              switch -CaseSensitive ($Match.Groups['Identifier'].Value) {
                'Manifest.Major' { $ManifestVersion.Major }
                'Manifest.Minor' { $ManifestVersion.Minor }
                'Manifest.Build' { $ManifestVersion.Build }
                'Manifest.Revision' { $ManifestVersion.Revision }
                'Container.Major' { $ContainerVersion.Major }
                'Container.Minor' { $ContainerVersion.Minor }
                'Container.Build' { $ContainerVersion.Build }
                'Container.Revision' { $ContainerVersion.Revision }
                'Custom.Major' { $CustomAppVersion.Major }
                'Custom.Minor' { $CustomAppVersion.Minor }
                'Custom.Build' { $CustomAppVersion.Build }
                'Custom.Revision' { $CustomAppVersion.Revision }
                'Release.Major' { $SelectedAppReleaseVersion.Major }
                'Release.Minor' { $SelectedAppReleaseVersion.Minor }
                'Release.Build' { $SelectedAppReleaseVersion.Build }
                'Release.Revision' { $SelectedAppReleaseVersion.Revision }
              }
            }
            [version]$SelectedAppReleaseVersion = [regex]::Replace($env:AppReleaseVersionFormat, $VersionNumberPattern, $VersionNumberEvaluator)
            [version]$SelectedAppVersion = [regex]::Replace($env:AppVersionFormat, $VersionNumberPattern, $VersionNumberEvaluator)
            if ($ManifestVersion.Major -ne $SelectedAppVersion.Major -or `
                $ManifestVersion.Minor -notin @(0, $SelectedAppVersion.Minor) -or `
                $ManifestVersion.Build -ne $SelectedAppVersion.Build -and `
                $ManifestVersion.Revision -ne $SelectedAppVersion.Revision) {
              if ($ManifestVersionMismatchAction -in @('warning', 'error')) {
                Write-Warning -Message "Manifest app version does not match selected app version."
              }
              if ($ManifestVersionMismatchAction -eq 'error') {
                exit(1)
              }
            }
            Write-Host -Object "Selected application release version: $SelectedAppReleaseVersion"
            Write-Host -Object "Selected application version: $SelectedAppVersion"
            Write-Host -Object "##vso[task.setvariable variable=AppReleaseVersion;]$SelectedAppReleaseVersion"
            Write-Host -Object "##vso[task.setvariable variable=BcApplicationVersion;]$SelectedAppVersion"
            $ManifestApp = $(
              Get-Content -Path $AppFolder/app.json |
              ConvertFrom-Json )
            $ManifestApp.Version = [string]$SelectedAppVersion
            $ManifestApp |
            ConvertTo-Json |
            Set-Content -LiteralPath $AppFolder/app.json
          }
        }

        $InstallAppsFolders = $(
          $env:LatestDependencyAppPaths | ConvertFrom-Json
        )
        $AppsFromDependencies = @(
          $InstallAppsFolders |
          Where-Object -FilterScript { $_ } |
          ForEach-Object -Process {
            $AppFiles = `
              Get-ChildItem -LiteralPath $_ -Filter '*.app' -Recurse |
            Select-Object -ExpandProperty FullName
            if ($AppFiles) {
              $AppFiles
            } else {
              Write-Host -Object "No app files found in folder $_."
              throw 'No app files found in folder.'
            }
          }
        )
        Write-Host -Object "Installed apps folders: $($InstallAppsFolders -join ', ')"

        $Global:ContainerName = -join [char[]]([char]'a'..[char]'z' | Get-Random -Count 8)
        $GetRunAlPipelineParameters = @{
          pipelinename                = 'Build'
          containerName               = $Global:ContainerName
          baseFolder                  = $env:BUILD_SOURCESDIRECTORY
          licenseFile                 = $env:LicenseFile
          appFolders                  = $AppFolders
          testFolders                 = $TestFolders
          memoryLimit                 = $env:DockerMemory
          codeSignCertPfxFile         = $env:CodeSignCertPfxFile
          codeSignCertPfxPassword     = (ConvertTo-SecureString -String $env:CodeSignCertPfxPassword -AsPlainText -Force)
          installApps                 = $AppsFromDependencies
          installTestRunner           = $true
          installTestFramework        = $true
          installTestLibraries        = $true
          azureDevOps                 = $true
          NewBCContainer              = $NewBCContainer
        }
        Run-AlPipeline `
          @GetRunAlPipelineParameters `
          @BcArtifactUrlOrImageName

        Write-Host -Object "##vso[task.setvariable variable=ContainerName;]$Global:ContainerName"
      env:
        BcVersion: ${{ parameters.bcVersion }}
        BcInsiderSasToken: $(BCSasToken)
        ALLanguageExtensionFileName: ${{ parameters.alLanguageExtensionFileName }}
        AlDotNetAssemblyProbingPaths: ${{ parameters.alDotNetAssemblyProbingPaths }}
        LicenseFile: $(DownloadBCLicense.SecureFilePath)
        CodeSignCertPfxFile: $(DownloadBCAppSigningCertificate.SecureFilePath)
        CodeSignCertPfxPassword: $(BCAppSigningCertificatePassword)
        AppFolders: ${{ convertToJson(parameters.appFolders) }}
        TestFolders: ${{ convertToJson(parameters.testFolders) }}
        AppReleaseVersionFormat: ${{ parameters.appReleaseVersionFormat }}
        AppVersionFormat: ${{ parameters.appVersionFormat }}
        CustomAppVersion: ${{ parameters.customAppVersion }}
        DockerMemory: $(DockerMemory)
        DockerIsolation: ${{ parameters.dockerIsolation }}
        BeforeAppsInstallScript: ${{ parameters.beforeAppsInstallScript }}
        LatestDependencyAppPaths: ${{ convertToJson(parameters.latestDependencyAppPaths) }}
      displayName: Run Pipeline

    - powershell: |
        Set-StrictMode -Version Latest
        $ErrorActionPreference = 'Stop'

        $DockerVersion = $env:BcApplicationVersion
        $BranchName = $(
          if ($env:IsPullRequest -eq 'false') {
              $env:Build_SourceBranchName
          } else {
              $env:System_PullRequest_TargetBranch -replace 'refs/heads/', ''
          }
        )

        $CommonPath = "\\filestorage\Projects\DevOps\$env:OrganizationName\$env:System_TeamProject\$env:Build_Repository_Name\$env:AppReleaseVersion\$env:AppVersion\$BranchName-$DockerVersion"
        $TempPath = "$CommonPath-Temporary-$env:Build_BuildID"
        
        
        #Add apps to top of project for convenience
        #------
        $ReleasesPath="\\filestorage\Projects\DevOps\$env:OrganizationName\$env:System_TeamProject\Releases\$BranchName-$env:AppReleaseVersion-$env:Build_Repository_Name"
        
        if ([System.IO.Directory]::Exists($ReleasesPath)) {
            [System.IO.Directory]::Delete($ReleasesPath, $true)
            [System.IO.Directory]::CreateDirectory($ReleasesPath)
            Copy-Item -Path ".output\*" -Destination $ReleasesPath -Force
        }
        else {
            [System.IO.Directory]::CreateDirectory($ReleasesPath)
            Copy-Item -Path ".output\*" -Destination $ReleasesPath -Force
        }
        
        
        #------
        
        if ([System.IO.Directory]::Exists($TempPath)) {
            #[System.IO.Directory]::Delete($TempPath, $true)
            throw "TempPath ($TempPath) already exist"
        }

        [System.IO.Directory]::CreateDirectory($TempPath)
        Copy-Item -Path * -Exclude .git -Destination $TempPath -Recurse -Force  
        
        

        $OldPath = "$CommonPath-Old"
        if ([System.IO.Directory]::Exists($OldPath)) {
            [System.IO.Directory]::Delete($OldPath, $true)
        }

        $Path = $CommonPath
        if ([System.IO.Directory]::Exists($Path)) {
            [System.IO.Directory]::CreateDirectory($OldPath)
            Copy-Item -Path $Path\* -Destination $OldPath -Recurse -Force  
            
            [System.IO.Directory]::Delete($Path, $true)
            [System.IO.Directory]::CreateDirectory($Path)
            
            Copy-Item -Path $TempPath -Destination $Path -Recurse -Force
            
            [System.IO.Directory]::Delete($TempPath, $true)
        }
        else {
            [System.IO.Directory]::CreateDirectory($Path)
            Copy-Item -Path $TempPath -Destination $Path -Recurse -Force  
            [System.IO.Directory]::Delete($TempPath, $true)
        }
      condition: startsWith(variables['Build.SourceVersionMessage'], 'Merge WIP to Release-')
      env:
        IsReleasePRCommit: $(IsReleasePRCommit)
        AppReleaseVersion: $(AppReleaseVersion)
        BcApplicationVersion: $(BcApplicationVersion)
      displayName: Copy files to BCApps

    - powershell: |
        Set-StrictMode -Version Latest

        $Path = "\\filestorage\Projects\DevOps\$env:OrganizationName\$env:System_TeamProject\$env:Build_Repository_Name\$env:LatestFolder"
        if ([System.IO.Directory]::Exists($Path)) {
            [System.IO.Directory]::Delete($Path, $true)
        }
        if (-not ([System.IO.Directory]::Exists($Path))) {
            [System.IO.Directory]::CreateDirectory($Path)
            Copy-Item -Path * -Exclude .git -Destination $Path -Recurse -Force 
        }
      #condition: not(startsWith(variables['Build.SourceVersionMessage'], 'Merge WIP to Release-'))
      env:
        LatestFolder: ${{ parameters.latestFolder }}
      displayName: Copy files to Latest folder

    - powershell: |
        Remove-BcContainer -containerName $env:ContainerName
        Flush-ContainerHelperCache -KeepDays 7
      condition: always()
      env:
        ContainerName: $(ContainerName)
      displayName: 'Cleanup'
